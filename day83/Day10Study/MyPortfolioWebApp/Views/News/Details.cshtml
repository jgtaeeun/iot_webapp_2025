@inject SignInManager<CustomUser> SignInManager
@inject UserManager<CustomUser> UserManager
@using Westwind.AspNetCore.Markdown
@model MyPortfolioWebApp.Models.News

@{
    ViewData["Title"] = "Details";
}
<section id="contact" class="contact section">

    <!-- Section Title -->
    <div class="container section-title" data-aos="fade-up">
        <h2>Details</h2>
    </div>
    <div class="container" data-aos="fade-up" data-aos-delay="100">
        <div class="row" style="display: flex; justify-content: center;">
            <div class="col-md-4" style="display: flex; justify-content: center; ">
                <table class="table " style="width: 100%; table-layout: auto;">
                    <tbody>
                        <tr>
                            <th style="min-width: 120px; white-space: nowrap;" >@Html.DisplayNameFor(model => model.Writer)</th>
                            <td>@Html.DisplayFor(model => model.Writer)</td>
                        </tr>
                        <tr>
                            <th style="min-width: 120px; white-space: nowrap;">@Html.DisplayNameFor(model => model.Title)</th>
                            <td>@Html.DisplayFor(model => model.Title)</td>
                        </tr>
                        <tr>
                            <th style="min-width: 120px; white-space: nowrap;">@Html.DisplayNameFor(model => model.Description)</th>

                            <td>

                                @* @Html.DisplayFor(model => model.Description)  *@
                                @Markdown.ParseHtmlString(Model.Description);
                            </td>
                        </tr>
                        <tr>
                            <th style="min-width: 120px; white-space: nowrap;">@Html.DisplayNameFor(model => model.PostdDate)</th>
                            <td>@Html.DisplayFor(model => model.PostdDate)</td>
                        </tr>
                        <tr>
                            <th style="min-width: 120px; white-space: nowrap;">@Html.DisplayNameFor(model => model.ReadCount)</th>
                            <td>@Html.DisplayFor(model => model.ReadCount)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div style="display: flex; justify-content: flex-end; gap: 10px;">
            @if (SignInManager.IsSignedIn(User) && User.Identity.Name == Model.Writer)  //로그인 완료일 때
            {
                
                <a asp-action="Edit" asp-route-id="@Model?.Id" class="btn btn-success btn-sm btn-kelly ">Edit</a>
                <a asp-action="Delete" asp-route-id="@Model?.Id" class="btn btn-success btn-sm btn-kelly ">Delete</a>
            }
         
            <a asp-action="Index" class="btn btn-success btn-sm btn-kelly ">Back to List</a>
        </div>
         
    </div>
  

</section><!-- /Contact Section -->

@section Scripts{ 
    <script src="~/dompurify/purify.min.js"></script> 
    <script>

        const dirty = document.getElementById("rawHtml").innerHTML;
        const clean = DOMPurify.sanitize(dirty);
        document.getElementById("viewer").innerHTML=clean;
     </script> 
 }